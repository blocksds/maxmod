# SPDX-License-Identifier: CC0-1.0
#
# SPDX-FileContributor: Antonio Niño Díaz, 2023

BLOCKSDS	?= /opt/blocksds/core
BLOCKSDSEXT	?= /opt/blocksds/external

# Source code paths
# -----------------

ifeq ($(SYSTEM),GBA)
SOURCEDIRS	:= source source_gba
INCLUDEDIRS	:= asm_include include source_gba source
endif
ifeq ($(SYSTEM),DS7)
SOURCEDIRS	:= source source_ds source_ds7
INCLUDEDIRS	:= asm_include include source_ds source source_ds7
endif
ifeq ($(SYSTEM),DS9)
SOURCEDIRS	:= source_ds source_ds9
INCLUDEDIRS	:= asm_include include source_ds source source_ds9
endif

# Build artifacts
# ---------------

ifeq ($(SYSTEM),GBA)
NAME		:= libmm
BUILDDIR	:= build/gba
endif
ifeq ($(SYSTEM),DS7)
NAME		:= libmm7
BUILDDIR	:= build/ds7
endif
ifeq ($(SYSTEM),DS9)
NAME		:= libmm9
BUILDDIR	:= build/ds9
endif

ARCHIVE		:= lib/$(NAME).a

# Tools
# -----

PREFIX		:= arm-none-eabi-
CC		:= $(PREFIX)gcc
CXX		:= $(PREFIX)g++
AR		:= ar
MKDIR		:= mkdir
RM		:= rm -rf

# Verbose flag
# ------------

ifeq ($(VERBOSE),1)
V		:=
else
V		:= @
endif

# Libraries
# ---------

ifeq ($(SYSTEM),GBA)
LIBDIRS		:=
endif
ifeq ($(SYSTEM),DS7)
LIBDIRS		:= $(BLOCKSDS)/libs/libnds
endif
ifeq ($(SYSTEM),DS9)
LIBDIRS		:= $(BLOCKSDS)/libs/libnds
endif

# Source files
# ------------

SOURCES_S	:= $(shell find -L $(SOURCEDIRS) -name "*.s")
SOURCES_C	:= $(shell find -L $(SOURCEDIRS) -name "*.c")
SOURCES_CPP	:= $(shell find -L $(SOURCEDIRS) -name "*.cpp")

# Compiler and linker flags
# -------------------------

ifeq ($(SYSTEM),GBA)
DEFINES		+= -D__GBA__ -DSYS_GBA -DUSE_IWRAM
ARCH		:= -mcpu=arm7tdmi -mtune=arm7tdmi
endif
ifeq ($(SYSTEM),DS7)
DEFINES		:= -D__NDS__ -DARM7 -DSYS_NDS -DSYS_NDS7
ARCH		:= -mcpu=arm7tdmi -mtune=arm7tdmi
endif
ifeq ($(SYSTEM),DS9)
DEFINES		+= -D__NDS__ -DARM9 -DSYS_NDS -DSYS_NDS9
ARCH		:= -march=armv5te -mtune=arm946e-s
endif

WARNFLAGS	:= -Wall -Wextra

INCLUDEFLAGS	:= $(foreach path,$(INCLUDEDIRS),-I$(path)) \
		   $(foreach path,$(LIBDIRS),-I$(path)/include)

ASFLAGS		+= -x assembler-with-cpp $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) \
		   -ffunction-sections -fdata-sections

CFLAGS		+= -std=gnu11 $(WARNFLAGS) $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) -O2 \
		   -ffunction-sections -fdata-sections \
		   -fomit-frame-pointer

CXXFLAGS	+= -std=gnu++14 $(WARNFLAGS) $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) -O2 \
		   -ffunction-sections -fdata-sections \
		   -fno-exceptions -fno-rtti \
		   -fomit-frame-pointer

# Intermediate build files
# ------------------------

OBJS		:= $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_S))) \
		   $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_C))) \
		   $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_CPP)))

DEPS		:= $(OBJS:.o=.d)

# Targets
# -------

.PHONY: all clean

all: $(ARCHIVE)

$(ARCHIVE): $(OBJS)
	@echo "  AR      $@"
	@$(MKDIR) -p $(@D)
	$(V)$(AR) rcs $@ $(OBJS)

clean:
	@echo "  CLEAN"
	$(V)$(RM) $(ARCHIVE) $(BUILDDIR)

# Rules
# -----

$(BUILDDIR)/%.s.o : %.s
	@echo "  AS      $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CC) $(ASFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.c.o : %.c
	@echo "  CC      $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CC) $(CFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.cpp.o : %.cpp
	@echo "  CXX     $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CXX) $(CXXFLAGS) -MMD -MP -c -o $@ $<

# Include dependency files if they exist
# --------------------------------------

-include $(DEPS)
